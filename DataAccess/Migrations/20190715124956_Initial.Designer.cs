// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(FacultateDbContext))]
    [Migration("20190715124956_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Adresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Oras");

                    b.Property<string>("Strada");

                    b.Property<int>("StudentId");

                    b.Property<string>("Tara");

                    b.HasKey("Id");

                    b.ToTable("Adresa");
                });

            modelBuilder.Entity("Domain.Curs", b =>
                {
                    b.Property<int>("MaterieId");

                    b.Property<int>("ProfesorId");

                    b.HasKey("MaterieId", "ProfesorId");

                    b.HasIndex("ProfesorId");

                    b.ToTable("Curs");
                });

            modelBuilder.Entity("Domain.Grupa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("An");

                    b.Property<string>("Nume");

                    b.HasKey("Id");

                    b.ToTable("Grupa");
                });

            modelBuilder.Entity("Domain.GrupareStudenti", b =>
                {
                    b.Property<int>("GrupaId");

                    b.Property<int>("StudentId");

                    b.Property<bool>("Curent");

                    b.Property<int>("Id");

                    b.HasKey("GrupaId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("GrupareStudenti");
                });

            modelBuilder.Entity("Domain.Materie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Denumire")
                        .HasColumnName("Nume_Materie")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Materie");
                });

            modelBuilder.Entity("Domain.Nota", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("GrupaId");

                    b.Property<int>("MaterieId");

                    b.Property<int>("ProfesorId");

                    b.Property<int>("Valoare");

                    b.HasKey("StudentId", "GrupaId", "MaterieId", "ProfesorId");

                    b.HasIndex("MaterieId");

                    b.HasIndex("ProfesorId");

                    b.HasIndex("GrupaId", "MaterieId", "ProfesorId");

                    b.ToTable("Nota");
                });

            modelBuilder.Entity("Domain.Orar", b =>
                {
                    b.Property<int>("GrupaId");

                    b.Property<int>("MaterieId");

                    b.Property<int>("ProfesorId");

                    b.Property<int?>("GrupareStudentiGrupaId");

                    b.Property<int?>("GrupareStudentiStudentId");

                    b.HasKey("GrupaId", "MaterieId", "ProfesorId");

                    b.HasIndex("ProfesorId");

                    b.HasIndex("GrupareStudentiGrupaId", "GrupareStudentiStudentId");

                    b.HasIndex("MaterieId", "ProfesorId");

                    b.ToTable("Orar");
                });

            modelBuilder.Entity("Domain.Profesor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nume")
                        .HasMaxLength(50);

                    b.Property<string>("Prenume")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Profesor");
                });

            modelBuilder.Entity("Domain.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdresaId");

                    b.Property<DateTime>("DataNastere");

                    b.Property<string>("Nume")
                        .HasMaxLength(50);

                    b.Property<string>("Prenume")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AdresaId")
                        .IsUnique();

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Domain.Curs", b =>
                {
                    b.HasOne("Domain.Materie", "Materie")
                        .WithMany("Cursuri")
                        .HasForeignKey("MaterieId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Profesor", "Profesor")
                        .WithMany("Cursuri")
                        .HasForeignKey("ProfesorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.GrupareStudenti", b =>
                {
                    b.HasOne("Domain.Grupa", "Grupa")
                        .WithMany("GrupeStudenti")
                        .HasForeignKey("GrupaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Student", "Student")
                        .WithMany("GrupareStudenti")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Nota", b =>
                {
                    b.HasOne("Domain.Grupa", "Grupa")
                        .WithMany()
                        .HasForeignKey("GrupaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Materie", "Materie")
                        .WithMany()
                        .HasForeignKey("MaterieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Profesor", "Profesor")
                        .WithMany()
                        .HasForeignKey("ProfesorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Student", "Student")
                        .WithMany("Note")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Orar", "Ora")
                        .WithMany("Note")
                        .HasForeignKey("GrupaId", "MaterieId", "ProfesorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Orar", b =>
                {
                    b.HasOne("Domain.Grupa", "Grupa")
                        .WithMany("Ore")
                        .HasForeignKey("GrupaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Materie", "Materie")
                        .WithMany()
                        .HasForeignKey("MaterieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Profesor", "Profesor")
                        .WithMany()
                        .HasForeignKey("ProfesorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.GrupareStudenti")
                        .WithMany("Ore")
                        .HasForeignKey("GrupareStudentiGrupaId", "GrupareStudentiStudentId");

                    b.HasOne("Domain.Curs", "Curs")
                        .WithMany("Ore")
                        .HasForeignKey("MaterieId", "ProfesorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Student", b =>
                {
                    b.HasOne("Domain.Adresa", "Adresa")
                        .WithOne("Student")
                        .HasForeignKey("Domain.Student", "AdresaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
